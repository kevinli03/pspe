---
title: "Multiple Group Models"
---

We often deal with data that is clustered or grouped. For example, if we are using European data, we might have observations from different countries. If we are using USA data, we might have observations from different states.

However, there might be differences between these clusters. We might want to make our model be able to account for these differences between clusters. One way to account for differences between groups is to essentially run different models for different groups:

$$
\begin{align}
\Y^\text{(group 1)} & = \beta_0^\text{(group 1)} + \beta_1^\text{(group 1)} \X^\text{(group 1)} + \eps \\
\Y^\text{(group 2)} & = \beta_0^\text{(group 2)} + \beta_1^\text{(group 2)} \X^\text{(group 2)} + \eps \\
\Y^\text{(group 3)} & = \beta_0^\text{(group 3)} + \beta_1^\text{(group 3)} \X^\text{(group 3)} + \eps \\
\end{align}
$$

This essentially means for each group, they have their own $\beta_0$ and $\beta_1$ estimates. Since we know $\beta_1$ is the relationship between input and output, this essentially allows the relationship between input and output to **vary** by group.

::: small
For example, this would allow the relationship between education and income to vary by country.
:::

If our outcome and input variables are measurement models, we can also play around with these in a few ways.

1.  We could assume the same measurement models across groups.
2.  Or, just like above, we could assume each group has its own measurement model, with its own $\lambda$ factor loading varying by group.

We noted in factor analysis that we typically assume the (outcome and input) factor is a standard normal distribution with mean of 0 and variance of 1.

In clustered analysis, we can't actually assume this. Why? Well, if we allow each group to have a different relationship between input and outcome, by definition, the outcome's mean will differ by country. So instead, we fix one group (usually randomly) to be standard normal with mean of 0 and variance of 1, and allow the variances of all the other groups be freely estimated.

<br />

To implement structural equation models, we use the **lavaan** package:

```{r, eval = F}
library(lavaan)
```

Then, we have to specify the relationships between variables we want to fit in our structural model - including measurement models, regression models, and correlations:

```{r, eval = F}
model <- '
# Measurement models 
  input1 =~ NA*item1 + item2 + item3
  input2 =~ NA*item4 + item5 + item6
  outcome =~ item1 + item2 + item3
  
# Regressions
  outcome ~ input1 + input2

# Covariances
  input1 ~~ input2

# Fixing the variances of independent variables at 1
  input1~~c(1,NA)*input1
  input2~~c(1,NA)*input2
  outcome~~c(1,NA)*outcome
'
```

Now, we estimate our specified model:

```{r, eval = F}
sem <- sem(model,
           data = my_data,
           group = "groupvariable",
           group.equal=c("intercepts","loadings","residuals"),
           missing="FIML")
summary(sem)
```

::: small
The missing argument tells the software to keep observations with missing values (this is typically a good thing). But it can take longer, so you can delete this argument for it to use only complete observations.
:::
